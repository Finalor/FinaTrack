@using FinaTrack.Components.Class
@using MudBlazor

<MudItem xs="1" Style="max-width: 100%;">
    @switch (ItemData.Type)
    {
        case "Path":
        case "Indice":
        case "Barren":
            
            break;

        case "Item":
            <MudButton Class="circular-button" OnClick="OnItemClick">
                @if (IsActif)
                {
                    <MudImage Src="@ItemData.ImagePath" Alt="Active Item" Style="width: 100%; height: 100%; border-radius: 50%;" />
                }
                else
                {
                    <MudImage Src="@ItemData.GreyImagePath" Alt="Inactive Item" Style="width: 100%; height: 100%; border-radius: 50%;" />
                }
            </MudButton>
            break;

        case "ItemIndice":
            
            break;

        case "Chant":
            
            break;

        case "Goal":
            
            break;

        default:
            break;
    }
</MudItem>

@* Style personnalisé du composant *@
<style>
    .circular-button {
        border-radius: 50%;
        padding: 0;
        width: 100%;
        height: 100%;
    }
</style>

@code {
    /// <summary>
    /// Données de l'item utilisées pour l'affichage dans l'interface.
    /// Contient des informations telles que le type, les images associées, etc.
    /// </summary>
    [Parameter]
    public required ItemLayout ItemData { get; set; }
    
    /// <summary>
    /// Indique si l'item est actif ou non.
    /// Si actif, une image spécifique sera affichée.
    /// </summary>
    [Parameter]
    public required bool IsActif { get; set; }

    /// <summary>
    /// Méthode appelée lorsque l'utilisateur clique sur un item.
    /// Cette méthode permet de basculer l'état de l'item entre actif et inactif.
    /// </summary>
    private void OnItemClick()
    {
        // Change l'état de l'élément (actif/inactif).
        IsActif = !IsActif;
    }
}