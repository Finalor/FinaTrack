@using FinaTrack.Components.Class
@using MudBlazor

<MudItem Style="max-width: 100%;">
    @switch (ItemData.Type)
    {
        case "Path":
        case "Indice":
        case "Barren":

            break;

        case "Item":
            <MudButton OnClick="OnItemClick" Class="backgroundButton">
                @if (ItemData.IsActive == 1)
                {
                    <MudImage Src="@ItemData.ImagePath" Alt="Active Item" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                }
                else
                {
                    <MudImage Src="@ItemData.GreyImagePath" Alt="Inactive Item" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                }
            </MudButton>
            break;

        case "Item2":
            <MudButton OnClick="OnItemClick" Class="backgroundButton">
                @switch (ItemData.IsActive)
                {
                    case 1:
                        <MudImage Src="@ItemData.ImagePath" Alt="First Active State" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                        break;
                    case 2:
                        <MudImage Src="@ItemData.ImagePath2" Alt="Second Active State" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                        break;
                    default:
                        <MudImage Src="@ItemData.GreyImagePath" Alt="Inactive Item" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                        break;
                }
            </MudButton>
            break;

        case "Item3":
            <MudButton OnClick="OnItemClick" Class="backgroundButton">
                @switch (ItemData.IsActive)
                {
                    case 1:
                        <MudImage Src="@ItemData.ImagePath" Alt="First Active State" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                        break;
                    case 2:
                        <MudImage Src="@ItemData.ImagePath2" Alt="Second Active State" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                        break;
                    case 3:
                        <MudImage Src="@ItemData.ImagePath3" Alt="Third Active State" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                        break;
                    default:
                        <MudImage Src="@ItemData.GreyImagePath" Alt="Inactive State" Style="width: 100%; height: 100%; border-radius: 50%;"/>
                        break;
                }
            </MudButton>
            break;

        case "ItemIndice":

            break;

        case "Chant":

            break;

        case "Goal":

            break;

        default:
            break;
    }
</MudItem>

<style>
    .backgroundButton {
        background-color: rgba(39, 39, 47, 1);
    }
</style>

@code {
    /// <summary>
    /// Données de l'item utilisées pour l'affichage dans l'interface.
    /// Contient des informations telles que le type, les images associées, etc.
    /// </summary>
    [Parameter]
    public required ItemLayout ItemData { get; set; }

    /// <summary>
    /// Méthode appelée lorsque l'utilisateur clique sur un item.
    /// Cette méthode permet de basculer l'état de l'item entre actif et inactif.
    /// </summary>
    private void OnItemClick()
    {
        ItemData.IsActive = ItemData.Type switch
        {
            // Change l'état de l'élément (actif/inactif) si le type est Item.
            "Item" => ItemData.IsActive == 1 ? 0 : 1,
            // Change l'état de l'élément si le type est Item2.
            "Item2" => ItemData.IsActive switch
            {
                0 => 1,
                1 => 2,
                2 => 0,
                _ => 0 // Renvoyer ZÉRO par défaut si une autre valeur existe.
            },
            // Change l'état de l'élément si le type est Item3.
            "Item3" => ItemData.IsActive switch
            {
                0 => 1,
                1 => 2,
                2 => 3,
                3 => 0,
                _ => 0 // Renvoyer ZÉRO par défaut si une autre valeur existe.
            },
            _ => ItemData.IsActive
        };
    }
}